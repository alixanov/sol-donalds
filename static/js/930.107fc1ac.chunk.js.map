{"version":3,"file":"static/js/930.107fc1ac.chunk.js","mappings":"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","sources":["components/game/Game.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport gsap from 'gsap';\r\nimport {\r\n  RestaurantMenu as RestaurantMenuIcon,\r\n  Timer as TimerIcon,\r\n  Fastfood as FastfoodIcon,\r\n  Replay as ReplayIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n  Chat as ChatIcon,\r\n  Menu as MenuIcon,\r\n  Close as CloseIcon,\r\n} from '@mui/icons-material';\r\nimport Confetti from 'react-confetti';\r\nimport uspex from '../../sound/успех.mp3';\r\nimport polojitelniy from '../../sound/положителный.mp3';\r\nimport otrisatelney from '../../sound/отрицателный.mp3';\r\nimport pobeda from '../../sound/победа.mp3';\r\nimport porajeniya from '../../sound/поражения.mp3';\r\nimport bunBottom from \"../../assets/bun-bottom.png\";\r\nimport bearMeat from \"../../assets/bear-meat.png\";\r\nimport bullBun from \"../../assets/bul-bunn.png\";\r\nimport bunTop from \"../../assets/bun-top.png\";\r\nimport bun from \"../../assets/bun.png\";\r\nimport cheese from \"../../assets/cheese.png\";\r\nimport chocolate from \"../../assets/chocolate.png\";\r\nimport fries from \"../../assets/fries.png\";\r\nimport cup from \"../../assets/cup.png\";\r\nimport ice from \"../../assets/ice.png\";\r\nimport ketchup from \"../../assets/ketchup.png\";\r\nimport lettuce from \"../../assets/lettuce.png\";\r\nimport mustard from \"../../assets/mustard.png\";\r\nimport patty from \"../../assets/patty.png\";\r\nimport salt from \"../../assets/salt.png\";\r\nimport sauce from \"../../assets/nft-sauce.png\";\r\nimport wrapper from \"../../assets/wrapper.png\";\r\n\r\n// Game constants\r\nconst GAME_DURATION = 120; // 2 minutes\r\nconst ORDER_PREP_TIME = 30; // 30 seconds per order\r\nconst MAX_ORDERS = 5;\r\nconst SCORE_PER_ORDER = 100;\r\nconst PENALTY_PER_MISTAKE = 20;\r\nconst ORDER_GENERATION_INTERVAL_MIN = 4000; // 4 seconds\r\nconst ORDER_GENERATION_INTERVAL_MAX = 8000; // 8 seconds\r\n\r\n// Sound effects\r\nconst sounds = {\r\n  success: new Audio(uspex),\r\n  select: new Audio(polojitelniy),\r\n  complete: new Audio(pobeda),\r\n  error: new Audio(otrisatelney),\r\n  defeat: new Audio(porajeniya),\r\n};\r\n\r\nconst playSound = type => {\r\n  try {\r\n    const sound = sounds[type];\r\n    if (sound) {\r\n      Object.values(sounds).forEach(s => {\r\n        if (s !== sound) {\r\n          s.pause();\r\n          s.currentTime = 0;\r\n        }\r\n      });\r\n      sound.currentTime = 0;\r\n      sound.volume = 0.5;\r\n      sound.play().catch(err => console.error(`Failed to play sound ${type}:`, err));\r\n    }\r\n  } catch (err) {\r\n    console.error(`Error playing sound ${type}:`, err);\r\n  }\r\n};\r\n\r\n// All possible ingredients\r\nconst allIngredients = [\r\n  'bun-bottom', 'patty', 'cheese', 'lettuce', 'bun-top',\r\n  'fries', 'salt', 'ketchup',\r\n  'cup', 'ice', 'soda',\r\n  'bun', 'sausage', 'mustard',\r\n  'chocolate', 'wrapper',\r\n  'bull-bun', 'bear-meat', 'nft-sauce',\r\n];\r\n\r\n// Image mapping for ingredients\r\nconst ingredientImages = {\r\n  'bun-bottom': bunBottom,\r\n  'patty': patty,\r\n  'cheese': cheese,\r\n  'lettuce': lettuce,\r\n  'bun-top': bunTop,\r\n  'fries': fries,\r\n  'salt': salt,\r\n  'ketchup': ketchup,\r\n  'cup': cup,\r\n  'ice': ice,\r\n  'soda': null,\r\n  'bun': bun,\r\n  'sausage': null,\r\n  'mustard': mustard,\r\n  'chocolate': chocolate,\r\n  'wrapper': wrapper,\r\n  'bull-bun': bullBun,\r\n  'bear-meat': bearMeat,\r\n  'nft-sauce': sauce,\r\n};\r\n\r\n// Recipe definitions\r\nconst recipes = {\r\n  'Sol-Burger': ['bun-bottom', 'patty', 'cheese', 'lettuce', 'bun-top'],\r\n  'Crypto Fries': ['fries', 'salt', 'ketchup'],\r\n  'Blockchain Soda': ['cup', 'ice', 'soda'],\r\n  'Hot Doge': ['bun', 'sausage', 'ketchup', 'mustard'],\r\n  'Moon Chocolate': ['chocolate', 'wrapper'],\r\n  'Solana Burger Deluxe': ['bull-bun', 'bear-meat', 'nft-sauce', 'cheese', 'lettuce'],\r\n  'Blockchain Fries': ['fries', 'salt', 'nft-sauce'],\r\n};\r\n\r\n// Generate dynamic customer\r\nconst generateCustomer = (orderName) => {\r\n  const names = [\r\n    'Alex', 'Maria', 'John', 'Emma', 'Liam', 'Sophia', 'Noah', 'Olivia',\r\n    'James', 'Ava', 'William', 'Isabella', 'Michael', 'Charlotte', 'Daniel',\r\n    'Amelia', 'Henry', 'Harper', 'Ethan', 'Evelyn'\r\n  ];\r\n  const avatars = [\r\n    '😊', '😎', '👩‍🦰', '👨‍🦱', '👩‍🦳', '👨‍🦲', '🧑‍🦱', '👧',\r\n    '👦', '👩', '👨', '🧑', '👵', '👴', '🧒'\r\n  ];\r\n  const messageVariations = [\r\n    `Can you make my ${orderName} quick?`,\r\n    `I'd like a ${orderName}, please!`,\r\n    `Extra sauce on my ${orderName}, thanks!`,\r\n    `No rush, but I need a ${orderName}.`,\r\n    `Make sure my ${orderName} is fresh!`\r\n  ];\r\n  return {\r\n    id: Date.now() + Math.random(),\r\n    name: names[Math.floor(Math.random() * names.length)],\r\n    avatar: avatars[Math.floor(Math.random() * avatars.length)],\r\n    message: messageVariations[Math.floor(Math.random() * messageVariations.length)],\r\n  };\r\n};\r\n\r\n// Styled components\r\nconst GameWrapper = styled.div`\r\n  @import url('https://fonts.googleapis.com/css2?family=Tektur:wght@400..900&display=swap');\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: rgba(23, 56, 30, 0.5);\r\n  color: #fff;\r\n  overflow: hidden;\r\n  touch-action: manipulation;\r\n  font-family: 'Tektur', sans-serif;\r\n`;\r\n\r\nconst GameHeader = styled.header`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 1rem;\r\n  background: #1a1a1a;\r\n  border-bottom: 1px solid #333;\r\n  \r\n  @media (max-width: 768px) {\r\n    padding: 0.5rem;\r\n    flex-wrap: wrap;\r\n    gap: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst GameTitle = styled.h1`\r\n  margin: 0;\r\n  font-family: 'Tektur', sans-serif;\r\n  font-weight: 700;\r\n  font-size: 1.5rem;\r\n  color: #FFC107;\r\n  letter-spacing: 0.05em;\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\r\n  \r\n  @media (max-width: 768px) {\r\n    font-size: 1.2rem;\r\n  }\r\n  \r\n  @media (max-width: 480px) {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\nconst GameStats = styled.div`\r\n  display: flex;\r\n  gap: 1rem;\r\n  align-items: center;\r\n  \r\n  @media (max-width: 768px) {\r\n    gap: 0.5rem;\r\n    flex-wrap: wrap;\r\n  }\r\n`;\r\n\r\nconst HomeButton = styled.button`\r\n  background: #FFC107;\r\n  color: #000;\r\n  border: none;\r\n  padding: 0.5rem;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-family: 'Tektur', sans-serif;\r\n  font-weight: 700;\r\n  font-size: 1.2rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 40px;\r\n  height: 40px;\r\n  transition: all 0.2s ease;\r\n  \r\n  &:hover, &:active {\r\n    background: #FFA000;\r\n    transform: scale(1.05);\r\n  }\r\n  \r\n  @media (max-width: 768px) {\r\n    width: 36px;\r\n    height: 36px;\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\nconst StatItem = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.3rem;\r\n  font-family: 'Tektur', sans-serif;\r\n  font-weight: 500;\r\n  font-size: 0.9rem;\r\n  \r\n  @media (max-width: 768px) {\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\nconst MobileMenuToggle = styled.button`\r\n  display: none;\r\n  background: #FFC107;\r\n  color: #000;\r\n  border: none;\r\n  padding: 0.5rem;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-family: 'Tektur', sans-serif;\r\n  font-weight: 500;\r\n  \r\n  @media (max-width: 768px) {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst GameContent = styled.div`\r\n  display: flex;\r\n  height: calc(100vh - 80px);\r\n  \r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n    height: calc(100vh - 100px);\r\n  }\r\n`;\r\n\r\nconst OrdersColumn = styled.div`\r\n  width: 300px;\r\n  padding: 1rem;\r\n  background: #1a1a1a;\r\n  border-right: 1px solid #333;\r\n  overflow-y: auto;\r\n  transition: transform 0.3s ease;\r\n  \r\n  @media (max-width: 768px) {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 20;\r\n    transform: ${props => props.mobileMenuOpen ? 'translateX(0)' : 'translateX(-100%)'};\r\n    border-right: none;\r\n    background: rgba(0, 0, 0, 0.95);\r\n  }\r\n`;\r\n\r\nconst MobileOrdersHeader = styled.div`\r\n  display: none;\r\n  \r\n  @media (max-width: 768px) {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 1rem;\r\n    margin-bottom: 1rem;\r\n    border-bottom: 1px solid #333;\r\n    \r\n    h3 {\r\n      margin: 0;\r\n      font-family: 'Tektur', sans-serif;\r\n      font-weight: 700;\r\n      color: #FFC107;\r\n      letter-spacing: 0.05em;\r\n      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\r\n    }\r\n  }\r\n`;\r\n\r\nconst OrderCard = styled.div`\r\n  background: ${props => props.active ? '#2a2a2a' : '#1a1a1a'};\r\n  border: 1px solid ${props => props.active ? '#FFC107' : '#333'};\r\n  border-radius: 8px;\r\n  padding: 1rem;\r\n  margin-bottom: 1rem;\r\n  cursor: ${props => props.completed || props.failed ? 'default' : 'pointer'};\r\n  transition: all 0.3s ease;\r\n  touch-action: manipulation;\r\n  opacity: ${props => props.completed || props.failed ? 0.6 : 1};\r\n\r\n  &:hover, &:active {\r\n    ${props => !(props.completed || props.failed) && `\r\n      border-color: #FFC107;\r\n      transform: scale(1.02);\r\n    `}\r\n  }\r\n  \r\n  @media (max-width: 768px) {\r\n    padding: 0.8rem;\r\n  }\r\n`;\r\n\r\nconst OrderHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst OrderTitle = styled.h3`\r\n  margin: 0;\r\n  font-family: 'Tektur', sans-serif;\r\n  font-weight: 700;\r\n  color: ${props => props.completed || props.failed ? '#FFC107' : '#fff'};\r\n  text-decoration: ${props => props.completed || props.failed ? 'line-through' : 'none'};\r\n  font-size: 1rem;\r\n  letter-spacing: 0.05em;\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\r\n  \r\n  @media (max-width: 768px) {\r\n    font-size: 0.9rem;\r\n  }\r\n`;\r\n\r\nconst OrderTime = styled.div`\r\n  font-family: 'Tektur', sans-serif;\r\n  font-weight: 500;\r\n  font-size: 0.8rem;\r\n  color: ${props => props.warning ? 'rgba(255, 0, 0, 0.5)' : '#ccc'};\r\n`;\r\n\r\nconst OrderIngredients = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 0.3rem;\r\n  margin-top: 0.5rem;\r\n`;\r\n\r\nconst IngredientPill = styled.div`\r\n  background: ${props => props.added ? '#FFC107' : props.required ? '#555' : '#333'};\r\n  color: ${props => props.added ? '#000' : '#fff'};\r\n  padding: 0.2rem 0.5rem;\r\n  border-radius: 15px;\r\n  font-family: 'Tektur', sans-serif;\r\n  font-weight: 500;\r\n  font-size: 0.7rem;\r\n  border: ${props => props.added ? '2px solid #FFC107' : 'none'};\r\n  \r\n  @media (max-width: 768px) {\r\n    font-size: 0.6rem;\r\n    padding: 0.2rem 0.4rem;\r\n  }\r\n`;\r\n\r\nconst WorkArea = styled.div`\r\n  flex: 1;\r\n  padding: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  \r\n  @media (max-width: 768px) {\r\n    padding: 0.5rem;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nconst CurrentOrder = styled.div`\r\n  background: #1a1a1a;\r\n  border: 1px solid #333;\r\n  border-radius: 8px;\r\n  padding: 1rem;\r\n  margin-bottom: 1rem;\r\n  min-height: 120px;\r\n  \r\n  @media (max-width: 768px) {\r\n    padding: 0.8rem;\r\n    min-height: 100px;\r\n  }\r\n`;\r\n\r\nconst CustomerInfo = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1rem;\r\n  margin-bottom: 1rem;\r\n  \r\n  @media (max-width: 768px) {\r\n    gap: 0.5rem;\r\n    margin-bottom: 0.8rem;\r\n  }\r\n`;\r\n\r\nconst CustomerAvatar = styled.div`\r\n  font-size: 2rem;\r\n  \r\n  @media (max-width: 768px) {\r\n    font-size: 1.5rem;\r\n  }\r\n`;\r\n\r\nconst CustomerMessage = styled.div`\r\n  background: rgba(255, 0, 0, 0.5);\r\n  padding: 0.5rem 1rem;\r\n  border-radius: 8px;\r\n  flex: 1;\r\n  font-family: 'Tektur', sans-serif;\r\n  font-weight: 400;\r\n  font-size: 0.9rem;\r\n  \r\n  @media (max-width: 768px) {\r\n    padding: 0.4rem 0.8rem;\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\nconst OrderProgress = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 0.3rem;\r\n`;\r\n\r\nconst IngredientsArea = styled.div`\r\n  flex: 1;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\r\n  gap: 1rem;\r\n  padding: 1.5rem;\r\n  background: #1a1a1a;\r\n  border-radius: 12px;\r\n  overflow-y: auto;\r\n  \r\n  @media (max-width: 768px) {\r\n    grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));\r\n    gap: 0.8rem;\r\n    padding: 1rem;\r\n  }\r\n  \r\n  @media (max-width: 480px) {\r\n    grid-template-columns: repeat(auto-fit, minmax(70px, 1fr));\r\n    gap: 0.6rem;\r\n    padding: 0.8rem;\r\n  }\r\n`;\r\n\r\nconst IngredientCard = styled.div`\r\n  width: 120px;\r\n  height: 120px;\r\n  background: #1a1a1a;\r\n  border: 3px solid #c0c0c0;\r\n  border-radius: 8px;\r\n  padding: 0.5rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  touch-action: manipulation;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\r\n  position: relative;\r\n  overflow: hidden;\r\n  font-family: 'Tektur', sans-serif;\r\n\r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(255, 193, 7, 0.2);\r\n    opacity: 0;\r\n    transition: opacity 0.3s ease;\r\n  }\r\n\r\n  &:hover, &:active {\r\n    transform: scale(1.05);\r\n    border-color: #FFC107;\r\n    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.6);\r\n    &::before {\r\n      opacity: 1;\r\n    }\r\n  }\r\n  \r\n  @media (max-width: 768px) {\r\n    width: 80px;\r\n    height: 80px;\r\n    padding: 0.4rem;\r\n    border-width: 2px;\r\n    border-radius: 6px;\r\n  }\r\n  \r\n  @media (max-width: 480px) {\r\n    width: 70px;\r\n    height: 70px;\r\n    padding: 0.3rem;\r\n    border-radius: 5px;\r\n  }\r\n`;\r\n\r\nconst IngredientIcon = styled.div`\r\n  margin-bottom: 0.3rem;\r\n  transition: transform 0.3s ease;\r\n  \r\n  img {\r\n    width: 36px;\r\n    height: 36px;\r\n    object-fit: contain;\r\n  }\r\n  \r\n  span {\r\n    font-size: 1.8rem;\r\n  }\r\n  \r\n  ${IngredientCard}:hover & {\r\n    transform: scale(1.1);\r\n  }\r\n  \r\n  @media (max-width: 768px) {\r\n    margin-bottom: 0.2rem;\r\n    img {\r\n      width: 32px;\r\n      height: 32px;\r\n    }\r\n    span {\r\n      font-size: 1.6rem;\r\n    }\r\n  }\r\n  \r\n  @media (max-width: 480px) {\r\n    margin-bottom: 0.1rem;\r\n    img {\r\n      width: 28px;\r\n      height: 28px;\r\n    }\r\n    span {\r\n      font-size: 1.4rem;\r\n    }\r\n  }\r\n`;\r\n\r\nconst IngredientName = styled.div`\r\n  font-family: 'Tektur', sans-serif;\r\n  font-weight: 400;\r\n  font-size: 0.7rem;\r\n  text-align: center;\r\n  line-height: 1.1;\r\n  color: #fff;\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.6);\r\n  \r\n  @media (max-width: 768px) {\r\n    font-size: 0.65rem;\r\n  }\r\n  \r\n  @media (max-width: 480px) {\r\n    font-size: 0.6rem;\r\n  }\r\n`;\r\n\r\nconst GameControls = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 1rem;\r\n  background: #1a1a1a;\r\n  border-top: 1px solid #333;\r\n  \r\n  @media (max-width: 768px) {\r\n    padding: 0.5rem;\r\n    gap: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst ControlButton = styled.button`\r\n  background: ${props => props.primary ? '#FFC107' : '#333'};\r\n  color: ${props => props.primary ? '#000' : '#fff'};\r\n  border: none;\r\n  padding: 0.6rem 1rem;\r\n  border-radius: 4px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  touch-action: manipulation;\r\n  font-family: 'Tektur', sans-serif;\r\n  font-weight: 500;\r\n  font-size: 0.9rem;\r\n\r\n  &:hover, &:active {\r\n    background: ${props => props.primary ? '#FFA000' : '#444'};\r\n    transform: scale(1.05);\r\n  }\r\n  \r\n  @media (max-width: 768px) {\r\n    padding: 0.5rem 0.8rem;\r\n    font-size: 0.8rem;\r\n    gap: 0.3rem;\r\n  }\r\n`;\r\n\r\nconst GameOverlay = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 30;\r\n  text-align: center;\r\n  \r\n  @media (max-width: 768px) {\r\n    justify-content: flex-end;\r\n    padding-bottom: 2rem;\r\n  }\r\n`;\r\n\r\nconst GameOverTitle = styled.h2`\r\n  font-family: 'Tektur', sans-serif;\r\n  font-weight: 700;\r\n  font-size: 2.5rem;\r\n  color: #FFC107;\r\n  margin-bottom: 0.8rem;\r\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);\r\n  letter-spacing: 0.05em;\r\n  \r\n  @media (max-width: 768px) {\r\n    font-size: 2rem;\r\n  }\r\n  \r\n  @media (max-width: 480px) {\r\n    font-size: 1.5rem;\r\n  }\r\n`;\r\n\r\nconst NotificationContainer = styled.div`\r\n  position: fixed;\r\n  top: 1rem;\r\n  right: 1rem;\r\n  z-index: 40;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.5rem;\r\n  \r\n  @media (max-width: 768px) {\r\n    top: 0.5rem;\r\n    right: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst Notification = styled.div`\r\n  background: ${props => props.error ? '#d32f2f' : '#FFC107'};\r\n  color: #fff;\r\n  padding: 1rem;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.6);\r\n  max-width: 300px;\r\n  opacity: 0;\r\n  transform: translateY(-20px);\r\n  font-family: 'Tektur', sans-serif;\r\n  font-weight: 400;\r\n  font-size: 0.9rem;\r\n  \r\n  h4 {\r\n    font-family: 'Tektur', sans-serif;\r\n    font-weight: 700;\r\n    font-size: 1rem;\r\n    margin: 0;\r\n    color: #fff;\r\n    letter-spacing: 0.05em;\r\n  }\r\n  \r\n  @media (max-width: 768px) {\r\n    padding: 0.8rem;\r\n    max-width: 250px;\r\n    font-size: 0.8rem;\r\n    \r\n    h4 {\r\n      font-size: 0.9rem;\r\n    }\r\n  }\r\n  \r\n  @media (max-width: 480px) {\r\n    padding: 0.6rem;\r\n    max-width: 200px;\r\n    font-size: 0.7rem;\r\n    \r\n    h4 {\r\n      font-size: 0.8rem;\r\n    }\r\n  }\r\n`;\r\n\r\nconst NoOrdersMessage = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  text-align: center;\r\n  padding: 2rem;\r\n  \r\n  h3 {\r\n    font-family: 'Tektur', sans-serif;\r\n    font-weight: 700;\r\n    font-size: 1.5rem;\r\n    margin-bottom: 1rem;\r\n    color: #FFC107;\r\n    letter-spacing: 0.05em;\r\n    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\r\n    \r\n    @media (max-width: 768px) {\r\n      font-size: 1.2rem;\r\n    }\r\n  }\r\n  \r\n  p {\r\n    font-family: 'Tektur', sans-serif;\r\n    font-weight: 400;\r\n    font-size: 1rem;\r\n    opacity: 0.8;\r\n    \r\n    @media (max-width: 768px) {\r\n      font-size: 0.9rem;\r\n    }\r\n  }\r\n`;\r\n\r\nconst WelcomeMessage = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  text-align: center;\r\n  padding: 2rem;\r\n  \r\n  h3 {\r\n    font-family: 'Tektur', sans-serif;\r\n    font-weight: 700;\r\n    font-size: 1.5rem;\r\n    margin-bottom: 1rem;\r\n    color: #FFC107;\r\n    letter-spacing: 0.05em;\r\n    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\r\n    \r\n    @media (max-width: 768px) {\r\n      font-size: 1.2rem;\r\n    }\r\n  }\r\n  \r\n  p {\r\n    font-family: 'Tektur', sans-serif;\r\n    font-weight: 400;\r\n    font-size: 1rem;\r\n    opacity: 0.8;\r\n    max-width: 600px;\r\n    \r\n    @media (max-width: 768px) {\r\n      font-size: 0.9rem;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Game = () => {\r\n  const navigate = useNavigate();\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [timeLeft, setTimeLeft] = useState(GAME_DURATION);\r\n  const [score, setScore] = useState(0);\r\n  const [orders, setOrders] = useState([]);\r\n  const [activeOrder, setActiveOrder] = useState(null);\r\n  const [showConfetti, setShowConfetti] = useState(false);\r\n  const [customer, setCustomer] = useState(null);\r\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const notificationRefs = useRef([]);\r\n  const lastClickRef = useRef(0);\r\n\r\n  // Initialize orders\r\n  useEffect(() => {\r\n    const initialOrders = Object.keys(recipes).slice(0, 3).map((name, index) => ({\r\n      id: Date.now() + index,\r\n      name,\r\n      recipe: recipes[name],\r\n      timeLeft: ORDER_PREP_TIME,\r\n      completed: false,\r\n      failed: false,\r\n      ingredientsAdded: [],\r\n      customer: generateCustomer(name),\r\n    }));\r\n    setOrders(initialOrders);\r\n    playSound('select');\r\n  }, []);\r\n\r\n  // Game timer and order timer\r\n  useEffect(() => {\r\n    if (gameOver) return;\r\n\r\n    const timer = setInterval(() => {\r\n      setTimeLeft(prev => {\r\n        if (prev <= 1) {\r\n          clearInterval(timer);\r\n          setGameOver(true);\r\n          playSound('defeat');\r\n          return 0;\r\n        }\r\n        return prev - 1;\r\n      });\r\n\r\n      setOrders(prevOrders => {\r\n        const allCompleted = prevOrders.every(o => o.completed || o.failed) && prevOrders.length > 0;\r\n        if (allCompleted) {\r\n          setGameOver(true);\r\n          playSound('complete');\r\n          return prevOrders;\r\n        }\r\n        return prevOrders.map(order =>\r\n          !order.completed && !order.failed\r\n            ? { ...order, timeLeft: order.timeLeft - 1 }\r\n            : order\r\n        );\r\n      });\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timer);\r\n  }, [gameOver]);\r\n\r\n  // Generate new orders\r\n  useEffect(() => {\r\n    if (gameOver) return;\r\n\r\n    let orderTimeout;\r\n\r\n    const generateOrder = () => {\r\n      setOrders(prevOrders => {\r\n        const activeOrders = prevOrders.filter(o => !o.completed && !o.failed);\r\n        if (activeOrders.length < MAX_ORDERS) {\r\n          const menuItems = Object.keys(recipes);\r\n          const randomItem = menuItems[Math.floor(Math.random() * menuItems.length)];\r\n          const newOrder = {\r\n            id: Date.now(),\r\n            name: randomItem,\r\n            recipe: recipes[randomItem] || [],\r\n            timeLeft: ORDER_PREP_TIME,\r\n            completed: false,\r\n            failed: false,\r\n            ingredientsAdded: [],\r\n            customer: generateCustomer(randomItem),\r\n          };\r\n          playSound('success');\r\n          return [...prevOrders, newOrder];\r\n        }\r\n        return prevOrders;\r\n      });\r\n\r\n      clearTimeout(orderTimeout);\r\n      const delay = Math.random() * (ORDER_GENERATION_INTERVAL_MAX - ORDER_GENERATION_INTERVAL_MIN) + ORDER_GENERATION_INTERVAL_MIN;\r\n      orderTimeout = setTimeout(generateOrder, delay);\r\n    };\r\n\r\n    orderTimeout = setTimeout(generateOrder, Math.random() * (ORDER_GENERATION_INTERVAL_MAX - ORDER_GENERATION_INTERVAL_MIN) + ORDER_GENERATION_INTERVAL_MIN);\r\n\r\n    return () => clearTimeout(orderTimeout);\r\n  }, [gameOver]);\r\n\r\n  // Check for expired orders\r\n  useEffect(() => {\r\n    const expiredOrders = orders.filter(order => order.timeLeft <= 0 && !order.completed && !order.failed);\r\n    if (expiredOrders.length > 0) {\r\n      expiredOrders.forEach(order => {\r\n        playSound('defeat');\r\n        addNotification(`Order ${order.name} expired!`);\r\n      });\r\n      setOrders(prevOrders =>\r\n        prevOrders.map(order =>\r\n          order.timeLeft <= 0 && !order.completed && !order.failed\r\n            ? { ...order, failed: true }\r\n            : order\r\n        )\r\n      );\r\n      if (activeOrder && expiredOrders.some(o => o.id === activeOrder)) {\r\n        const nextOrder = orders.find(o => !o.completed && !o.failed);\r\n        setActiveOrder(nextOrder?.id || null);\r\n        setCustomer(nextOrder?.customer || null);\r\n      }\r\n    }\r\n  }, [orders, activeOrder]);\r\n\r\n  // Clear completed/failed orders\r\n  useEffect(() => {\r\n    const completedOrders = orders.filter(o => o.completed || o.failed);\r\n    if (completedOrders.length > 0) {\r\n      const timeout = setTimeout(() => {\r\n        setOrders(prev => prev.filter(o => !o.completed && !o.failed));\r\n      }, 2000); // Reduced to 2 seconds for faster turnover\r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [orders]);\r\n\r\n  // Animate notifications\r\n  useEffect(() => {\r\n    notifications.forEach((notification, index) => {\r\n      const element = notificationRefs.current[index];\r\n      if (element) {\r\n        gsap.fromTo(\r\n          element,\r\n          { opacity: 0, y: -20 },\r\n          { opacity: 1, y: 0, duration: 0.5, ease: 'power2.out' },\r\n        );\r\n        gsap.to(element, {\r\n          opacity: 0,\r\n          y: -20,\r\n          duration: 0.5,\r\n          ease: 'power2.in',\r\n          delay: 3,\r\n          onComplete: () => {\r\n            setNotifications(prev => prev.filter(n => n.id !== notification.id));\r\n          },\r\n        });\r\n      }\r\n    });\r\n  }, [notifications]);\r\n\r\n  // Animate game over overlay\r\n  useEffect(() => {\r\n    if (gameOver) {\r\n      gsap.fromTo(\r\n        '.game-over-overlay',\r\n        { scale: 0.8, opacity: 0 },\r\n        { scale: 1, opacity: 1, duration: 0.7, ease: 'back.out(1.7)' },\r\n      );\r\n    }\r\n  }, [gameOver]);\r\n\r\n  // Validate activeOrder\r\n  useEffect(() => {\r\n    if (activeOrder && !orders.find(o => o.id === activeOrder)) {\r\n      const nextOrder = orders.find(o => !o.completed && !o.failed);\r\n      setActiveOrder(nextOrder?.id || null);\r\n      setCustomer(nextOrder?.customer || null);\r\n    }\r\n  }, [orders, activeOrder]);\r\n\r\n  // Add notification\r\n  const addNotification = (message, error = false) => {\r\n    const id = Date.now();\r\n    setNotifications(prev => [...prev, { id, message, error }]);\r\n  };\r\n\r\n  // Restart game\r\n  const restartGame = () => {\r\n    setGameOver(false);\r\n    setTimeLeft(GAME_DURATION);\r\n    setScore(0);\r\n    const initialOrders = Object.keys(recipes).slice(0, 3).map((name, index) => ({\r\n      id: Date.now() + index,\r\n      name,\r\n      recipe: recipes[name],\r\n      timeLeft: ORDER_PREP_TIME,\r\n      completed: false,\r\n      failed: false,\r\n      ingredientsAdded: [],\r\n      customer: generateCustomer(name),\r\n    }));\r\n    setOrders(initialOrders);\r\n    setActiveOrder(null);\r\n    setShowConfetti(false);\r\n    setCustomer(null);\r\n    setMobileMenuOpen(false);\r\n    setNotifications([]);\r\n    playSound('select');\r\n  };\r\n\r\n  // Handle ingredient click\r\n  const handleIngredientClick = ingredient => {\r\n    if (!activeOrder || gameOver) return;\r\n\r\n    const now = Date.now();\r\n    if (now - lastClickRef.current < 500) return; // Debounce 500ms\r\n    lastClickRef.current = now;\r\n\r\n    const order = orders.find(o => o.id === activeOrder);\r\n    if (!order || order.completed || order.failed) return;\r\n\r\n    const nextIndex = order.ingredientsAdded.length;\r\n    const isCorrect = order.recipe[nextIndex] === ingredient;\r\n    const isAlreadyAdded = order.ingredientsAdded.includes(ingredient);\r\n\r\n    if (isCorrect && !isAlreadyAdded) {\r\n      setOrders(prevOrders => {\r\n        const updatedOrders = prevOrders.map(o =>\r\n          o.id === activeOrder\r\n            ? { ...o, ingredientsAdded: [...o.ingredientsAdded, ingredient] }\r\n            : o\r\n        );\r\n        const updatedOrder = updatedOrders.find(o => o.id === activeOrder);\r\n        if (updatedOrder && updatedOrder.ingredientsAdded.length === updatedOrder.recipe.length) {\r\n          completeOrder(updatedOrder);\r\n        } else {\r\n          playSound('success');\r\n          addNotification(`Added ${ingredient}!`);\r\n        }\r\n        return updatedOrders;\r\n      });\r\n    } else {\r\n      setScore(prev => Math.max(0, prev - PENALTY_PER_MISTAKE));\r\n      playSound('error');\r\n      addNotification(\r\n        isAlreadyAdded ? `${ingredient} already added!` : `Wrong ingredient!`,\r\n        true\r\n      );\r\n    }\r\n  };\r\n\r\n  // Complete order\r\n  const completeOrder = order => {\r\n    setOrders(prevOrders => {\r\n      const updatedOrders = prevOrders.map(o =>\r\n        o.id === order.id ? { ...o, completed: true } : o\r\n      );\r\n      const nextOrder = updatedOrders.find(o => !o.completed && !o.failed);\r\n      setActiveOrder(nextOrder?.id || null);\r\n      setCustomer(nextOrder?.customer || null);\r\n      setScore(prev => prev + SCORE_PER_ORDER);\r\n      addNotification(`+${SCORE_PER_ORDER} pts for ${order.name}!`);\r\n      playSound('complete');\r\n      setShowConfetti(true);\r\n      setTimeout(() => setShowConfetti(false), 3000);\r\n      return updatedOrders;\r\n    });\r\n  };\r\n\r\n  // Select order\r\n  const selectOrder = orderId => {\r\n    if (gameOver) return;\r\n    const order = orders.find(o => o.id === orderId);\r\n    if (order && !order.completed && !order.failed) {\r\n      setActiveOrder(orderId);\r\n      setCustomer(order.customer);\r\n      setMobileMenuOpen(false);\r\n      playSound('select');\r\n    }\r\n  };\r\n\r\n  // Navigate home\r\n  const goHome = () => {\r\n    navigate('/');\r\n    playSound('select');\r\n  };\r\n\r\n  // Format time\r\n  const formatTime = seconds => {\r\n    const mins = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;\r\n  };\r\n\r\n  // Toggle mobile menu\r\n  const toggleMobileMenu = () => {\r\n    setMobileMenuOpen(!mobileMenuOpen);\r\n    playSound('select');\r\n  };\r\n\r\n  return (\r\n    <GameWrapper>\r\n      <GameHeader>\r\n        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\r\n          <HomeButton onClick={goHome} aria-label=\"Go to home menu\">\r\n            /\r\n          </HomeButton>\r\n          <GameTitle>Sol-Donalds Kitchen</GameTitle>\r\n          {orders.length > 0 && (\r\n            <MobileMenuToggle onClick={toggleMobileMenu}>\r\n              <MenuIcon />\r\n              Orders\r\n            </MobileMenuToggle>\r\n          )}\r\n        </div>\r\n        <GameStats>\r\n          <StatItem>\r\n            <TimerIcon />\r\n            <span>{formatTime(timeLeft)}</span>\r\n          </StatItem>\r\n          <StatItem>\r\n            <FastfoodIcon />\r\n            <span>{orders.filter(o => o.completed && !o.failed).length}/{orders.length}</span>\r\n          </StatItem>\r\n          <StatItem>\r\n            <RestaurantMenuIcon />\r\n            <span>{score} pts</span>\r\n          </StatItem>\r\n        </GameStats>\r\n      </GameHeader>\r\n\r\n      {gameOver && (\r\n        <GameOverlay className=\"game-over-overlay\" role=\"alert\" aria-live=\"polite\">\r\n          <GameOverTitle>Game Over!</GameOverTitle>\r\n          <div style={{ display: 'flex', gap: '1rem', flexWrap: 'wrap', justifyContent: 'center' }}>\r\n            <ControlButton primary onClick={restartGame}>\r\n              <ReplayIcon />\r\n              Play Again\r\n            </ControlButton>\r\n            <ControlButton onClick={goHome}>\r\n              <ArrowBackIcon />\r\n              Back to Menu\r\n            </ControlButton>\r\n          </div>\r\n        </GameOverlay>\r\n      )}\r\n\r\n      <NotificationContainer>\r\n        {notifications.map((notification, index) => (\r\n          <Notification\r\n            key={notification.id}\r\n            ref={el => (notificationRefs.current[index] = el)}\r\n            role=\"alert\"\r\n            aria-live=\"polite\"\r\n            error={notification.error}\r\n          >\r\n            <CheckCircleIcon style={{ fontSize: '1.5rem', color: '#fff' }} />\r\n            <div>\r\n              <h4>{notification.error ? 'Error!' : 'Order Update'}</h4>\r\n              <span>{notification.message}</span>\r\n            </div>\r\n          </Notification>\r\n        ))}\r\n      </NotificationContainer>\r\n\r\n      {!gameOver && (\r\n        <GameContent>\r\n          <OrdersColumn mobileMenuOpen={mobileMenuOpen}>\r\n            <MobileOrdersHeader>\r\n              <h3>Orders Queue</h3>\r\n              <ControlButton onClick={toggleMobileMenu}>\r\n                <CloseIcon />\r\n              </ControlButton>\r\n            </MobileOrdersHeader>\r\n            <h3 style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>Orders Queue</h3>\r\n            {orders.length > 0 ? (\r\n              orders.map(order => (\r\n                <OrderCard\r\n                  key={order.id}\r\n                  active={activeOrder === order.id}\r\n                  completed={order.completed}\r\n                  failed={order.failed}\r\n                  onClick={() => selectOrder(order.id)}\r\n                >\r\n                  <OrderHeader>\r\n                    <OrderTitle completed={order.completed} failed={order.failed}>\r\n                      {order.name}\r\n                    </OrderTitle>\r\n                    <OrderTime warning={order.timeLeft <= 10 && !order.completed && !order.failed}>\r\n                      {formatTime(order.timeLeft)}\r\n                    </OrderTime>\r\n                  </OrderHeader>\r\n                  <OrderIngredients>\r\n                    {order.recipe.map(ing => (\r\n                      <IngredientPill key={ing} added={order.ingredientsAdded.includes(ing)}>\r\n                        {ing}\r\n                      </IngredientPill>\r\n                    ))}\r\n                  </OrderIngredients>\r\n                </OrderCard>\r\n              ))\r\n            ) : (\r\n              <NoOrdersMessage>\r\n                <h3>No Orders</h3>\r\n                <p>Waiting for new orders...</p>\r\n              </NoOrdersMessage>\r\n            )}\r\n          </OrdersColumn>\r\n\r\n          <WorkArea>\r\n            {activeOrder ? (\r\n              <>\r\n                <CurrentOrder>\r\n                  {customer && (\r\n                    <CustomerInfo>\r\n                      <CustomerAvatar>{customer.avatar}</CustomerAvatar>\r\n                      <CustomerMessage>\r\n                        <ChatIcon style={{ marginRight: '0.5rem', fontSize: '1rem' }} />\r\n                        {customer.name}: {customer.message}\r\n                      </CustomerMessage>\r\n                    </CustomerInfo>\r\n                  )}\r\n                  {orders.find(o => o.id === activeOrder) ? (\r\n                    <>\r\n                      <h4\r\n                        style={{\r\n                          margin: '0 0 0.5rem 0',\r\n                          fontSize: '1rem',\r\n                          fontFamily: \"'Tektur', sans-serif\",\r\n                          fontWeight: '700',\r\n                          letterSpacing: '0.05em',\r\n                          textShadow: '0 1px 2px rgba(0,0,0,0.3)',\r\n                        }}\r\n                      >\r\n                        Current: {orders.find(o => o.id === activeOrder)?.name}\r\n                      </h4>\r\n                      <OrderProgress>\r\n                        {orders.find(o => o.id === activeOrder)?.recipe.map(ing => (\r\n                          <IngredientPill\r\n                            key={ing}\r\n                            added={orders.find(o => o.id === activeOrder)?.ingredientsAdded.includes(ing)}\r\n                            required={true}\r\n                          >\r\n                            {ing}\r\n                          </IngredientPill>\r\n                        ))}\r\n                      </OrderProgress>\r\n                    </>\r\n                  ) : (\r\n                    <NoOrdersMessage>\r\n                      <h3>Order Not Found</h3>\r\n                      <p>Please select another order from the queue.</p>\r\n                    </NoOrdersMessage>\r\n                  )}\r\n                </CurrentOrder>\r\n\r\n                <IngredientsArea>\r\n                  {allIngredients.map(ing => (\r\n                    <IngredientCard key={ing} onClick={() => handleIngredientClick(ing)}>\r\n                      <IngredientIcon>\r\n                        {ingredientImages[ing] ? (\r\n                          <img src={ingredientImages[ing]} alt={ing} />\r\n                        ) : (\r\n                          <span>\r\n                            {ing === 'soda' ? '🥤' :\r\n                              ing === 'sausage' ? '🌭' :\r\n                                ing === 'nft-sauce' ? '🍅' : '🍴'}\r\n                          </span>\r\n                        )}\r\n                      </IngredientIcon>\r\n                      <IngredientName>{ing}</IngredientName>\r\n                    </IngredientCard>\r\n                  ))}\r\n                </IngredientsArea>\r\n              </>\r\n            ) : (\r\n              <WelcomeMessage>\r\n                <h3>Select an Order</h3>\r\n                <p>Choose an order from the queue on the left to start cooking!</p>\r\n              </WelcomeMessage>\r\n            )}\r\n          </WorkArea>\r\n        </GameContent>\r\n      )}\r\n\r\n      {showConfetti && (\r\n        <Confetti\r\n          width={window.innerWidth}\r\n          height={window.innerHeight}\r\n          recycle={false}\r\n          numberOfPieces={400}\r\n          colors={['#FFC107', 'rgba(255, 0, 0, 0.5)', '#ffffff']}\r\n        />\r\n      )}\r\n\r\n      {activeOrder && !gameOver && (\r\n        <GameControls>\r\n          <ControlButton onClick={goHome}>\r\n            <ArrowBackIcon />\r\n            Exit\r\n          </ControlButton>\r\n          <ControlButton primary onClick={restartGame}>\r\n            <ReplayIcon />\r\n            Restart\r\n          </ControlButton>\r\n        </GameControls>\r\n      )}\r\n    </GameWrapper>\r\n  );\r\n};\r\n\r\nexport default Game;"],"names":["ORDER_GENERATION_INTERVAL_MIN","sounds","success","Audio","uspex","select","polojitelniy","complete","pobeda","error","otrisatelney","defeat","porajeniya","playSound","type","sound","Object","values","forEach","s","pause","currentTime","volume","play","catch","err","console","concat","allIngredients","ingredientImages","bunBottom","patty","cheese","lettuce","bunTop","fries","salt","ketchup","cup","ice","bun","mustard","chocolate","wrapper","bullBun","bearMeat","sauce","recipes","generateCustomer","orderName","names","avatars","messageVariations","id","Date","now","Math","random","name","floor","length","avatar","message","GameWrapper","styled","div","_templateObject","_taggedTemplateLiteral","GameHeader","header","_templateObject2","GameTitle","h1","_templateObject3","GameStats","_templateObject4","HomeButton","button","_templateObject5","StatItem","_templateObject6","MobileMenuToggle","_templateObject7","GameContent","_templateObject8","OrdersColumn","_templateObject9","props","mobileMenuOpen","MobileOrdersHeader","_templateObject0","OrderCard","_templateObject1","active","completed","failed","OrderHeader","_templateObject10","OrderTitle","h3","_templateObject11","OrderTime","_templateObject12","warning","OrderIngredients","_templateObject13","IngredientPill","_templateObject14","added","required","WorkArea","_templateObject15","CurrentOrder","_templateObject16","CustomerInfo","_templateObject17","CustomerAvatar","_templateObject18","CustomerMessage","_templateObject19","OrderProgress","_templateObject20","IngredientsArea","_templateObject21","IngredientCard","_templateObject22","IngredientIcon","_templateObject23","IngredientName","_templateObject24","GameControls","_templateObject25","ControlButton","_templateObject26","primary","GameOverlay","_templateObject27","GameOverTitle","h2","_templateObject28","NotificationContainer","_templateObject29","Notification","_templateObject30","NoOrdersMessage","_templateObject31","WelcomeMessage","_templateObject32","Game","_orders$find","_orders$find2","navigate","useNavigate","gameOver","setGameOver","useState","timeLeft","setTimeLeft","score","setScore","orders","setOrders","activeOrder","setActiveOrder","showConfetti","setShowConfetti","customer","setCustomer","setMobileMenuOpen","notifications","setNotifications","notificationRefs","useRef","lastClickRef","useEffect","initialOrders","keys","slice","map","index","recipe","ingredientsAdded","timer","setInterval","prev","clearInterval","prevOrders","every","o","order","_objectSpread","orderTimeout","generateOrder","filter","menuItems","randomItem","newOrder","clearTimeout","delay","setTimeout","expiredOrders","addNotification","some","nextOrder","find","timeout","notification","element","current","gsap","fromTo","opacity","y","duration","ease","to","onComplete","n","scale","arguments","undefined","restartGame","completeOrder","updatedOrders","goHome","formatTime","seconds","mins","secs","toggleMobileMenu","_jsxs","children","style","display","alignItems","gap","_jsx","onClick","MenuIcon","TimerIcon","FastfoodIcon","RestaurantMenuIcon","className","role","flexWrap","justifyContent","ReplayIcon","ArrowBackIcon","ref","el","CheckCircleIcon","fontSize","color","CloseIcon","window","innerWidth","orderId","selectOrder","ing","includes","_Fragment","ChatIcon","marginRight","margin","fontFamily","fontWeight","letterSpacing","textShadow","_orders$find3","ingredient","nextIndex","isCorrect","isAlreadyAdded","updatedOrder","max","handleIngredientClick","src","alt","Confetti","width","height","innerHeight","recycle","numberOfPieces","colors"],"sourceRoot":""}